// Widget embebible minimalista para insertar en otras p√°ginas
(function(){
    // Crear el contenedor flotante si no existe
    function createWidgetContainer() {
        let container = document.getElementById('widget-bot-float');
        if (!container) {
            container = document.createElement('div');
            container.id = 'widget-bot-float';
            container.style.position = 'fixed';
            container.style.bottom = '24px';
            container.style.right = '24px';
            container.style.zIndex = '9999';
            document.body.appendChild(container);
        }
        return container;
    }

    // Renderiza el widget en el contenedor dado, ahora acepta options con 'pagina'
    function renderWidget(target, options = {}) {
        function getQueryParam(name) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(name);
        }

        // Obtener el valor de pagina, nombre, autoStart y modalidad de la URL
        const pagina = getQueryParam('pagina') || '';
        const nombre = getQueryParam('nombre') || '';
        const modalidad = getQueryParam('modalidad') || 'diferencial';
        // autoStart solo controla el inicio autom√°tico, no se pasa a ElevenLabs
        const agentId = options.agentId || 'YOUR_AGENT_ID'; // Permite pasar agentId din√°micamente
        const widget = document.createElement('div');
        widget.style.background = '#fff';
        widget.style.borderRadius = '16px';
        widget.style.boxShadow = '0 2px 16px rgba(0,0,0,0.12)';
        widget.style.padding = '18px 20px 14px 20px';
        widget.style.minWidth = '260px';
        widget.style.maxWidth = '320px';
        widget.style.fontFamily = 'Poppins, Arial, sans-serif';
        widget.style.display = 'flex';
        widget.style.flexDirection = 'column';
        widget.style.alignItems = 'center';
        widget.innerHTML = `
            <div style="display:flex;align-items:center;gap:10px;margin-bottom:10px;">
                <span style='font-weight:600;font-size:1.1em;color:#5b2d90;'>${pagina ? pagina : 'Asistente Virtual'}</span>
            </div>
            <button id="widget-bot-toggle" style="background:#2e7dff;color:#fff;border:none;border-radius:8px;padding:10px 18px;font-size:1em;cursor:pointer;transition:background 0.2s;">üéôÔ∏è Iniciar conversaci√≥n</button>
            <div id="widget-bot-status" style="margin-top:8px;font-size:0.95em;color:#e74c3c;">Desconectada</div>
            <div id="elevenlabs-widget-container"></div>
        `;
        target.appendChild(widget);

        // Insertar el widget de ElevenLabs con dynamic-variables
        const elevenlabsContainer = widget.querySelector('#elevenlabs-widget-container');
        if (elevenlabsContainer) {
            const el = document.createElement('elevenlabs-convai');
            el.setAttribute('agent-id', agentId);
            el.setAttribute('dynamic-variables', JSON.stringify({ pagina, nombre, modalidad }));
            elevenlabsContainer.appendChild(el);
            // Asegura que el script de ElevenLabs est√© cargado
            if (!document.querySelector('script[src="https://elevenlabs.io/convai-widget/index.js"]')) {
                const script = document.createElement('script');
                script.src = 'https://elevenlabs.io/convai-widget/index.js';
                script.async = true;
                script.type = 'text/javascript';
                document.body.appendChild(script);
            }
        }

        let conversation = null;
        let isActive = false;
        const toggleBtn = widget.querySelector('#widget-bot-toggle');
        const statusDiv = widget.querySelector('#widget-bot-status');

        function updateStatus(connected) {
            statusDiv.textContent = connected ? 'Conectada' : 'Desconectada';
            statusDiv.style.color = connected ? '#27ae60' : '#e74c3c';
        }

        async function requestMic() {
            try {
                await navigator.mediaDevices.getUserMedia({ audio: true });
                return true;
            } catch {
                return false;
            }
        }

        async function getSignedUrl() {
            try {
                const r = await fetch('/api/signed-url');
                if (!r.ok) throw new Error('No signed URL');
                const d = await r.json();
                return d.signedUrl;
            } catch {
                return null;
            }
        }

        toggleBtn.onclick = async function() {
            if (isActive) {
                if (conversation && conversation.endSession) await conversation.endSession();
                conversation = null;
                isActive = false;
                toggleBtn.innerHTML = 'üéôÔ∏è Iniciar conversaci√≥n';
                updateStatus(false);
            } else {
                const hasMic = await requestMic();
                if (!hasMic) return alert('Necesito acceso al micr√≥fono.');
                const signedUrl = await getSignedUrl();
                if (!signedUrl) return alert('No se pudo iniciar la conversaci√≥n.');
                if (!window.Conversation) return alert('No se encontr√≥ Conversation.');
                conversation = await window.Conversation.startSession({
                    signedUrl,
                    dynamicVariables: { pagina, nombre, modalidad }, // <-- pasa pagina, nombre y modalidad a ElevenLabs
                    onConnect: () => {
                        updateStatus(true);
                        toggleBtn.innerHTML = '‚èπÔ∏è Finalizar conversaci√≥n';
                        isActive = true;
                    },
                    onDisconnect: () => {
                        updateStatus(false);
                        toggleBtn.innerHTML = 'üéôÔ∏è Iniciar conversaci√≥n';
                        isActive = false;
                    },
                    onError: () => {
                        updateStatus(false);
                        alert('Error en la conversaci√≥n.');
                    }
                });
            }
        };

        // Iniciar conversaci√≥n autom√°ticamente si autoStart=true
        if (getQueryParam('autoStart') === 'true' && !isConversationActive) {
            toggleBtn.click();
        }
    }

    // Exponer funci√≥n global para uso externo
    window.renderWidget = function(target, options) {
        if (!target) target = createWidgetContainer();
        renderWidget(target, options);
    };
})();
